<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://chentianyicty6330.github.io</id>
    <title>陈添翼的博客</title>
    <updated>2023-01-29T02:20:42.744Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://chentianyicty6330.github.io"/>
    <link rel="self" href="https://chentianyicty6330.github.io/atom.xml"/>
    <subtitle>我是一名爱好广泛的初二学生
&lt;br&gt; 一个没有博客的程序员不是好程序员&lt;/br&gt;
&lt;br&gt; See me on &lt;a href=&quot;https://github.com/ChenTianyiCTY6330&quot; target=&quot;_blank&quot;&gt;GitHub&lt;/a&gt; / &lt;a href=&quot;https://blog.csdn.net/weixin_47561684&quot; target=&quot;_blank&quot;&gt;CSDN&lt;/a&gt; / &lt;a href=&quot;https://www.zhihu.com/people/chentianyi-93-62&quot; target=&quot;_blank&quot;&gt;知乎&lt;/a&gt; / &lt;a href=&quot;https://www.luogu.com.cn/user/696772&quot; target=&quot;_blank&quot;&gt;洛谷&lt;/a&gt; &lt;/br&gt;</subtitle>
    <logo>https://chentianyicty6330.github.io/images/avatar.png</logo>
    <icon>https://chentianyicty6330.github.io/favicon.ico</icon>
    <rights>All rights reserved 2023, 陈添翼的博客</rights>
    <entry>
        <title type="html"><![CDATA[初级-Part1-语言基础-IDE]]></title>
        <id>https://chentianyicty6330.github.io/post/primary-p1-language-basis-ide/</id>
        <link href="https://chentianyicty6330.github.io/post/primary-p1-language-basis-ide/">
        </link>
        <updated>2023-01-29T01:51:08.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>集成开发环境（IDE，Integrated Development Environment ）是用于提供程序开发环境的应用程序，一般包括代码编辑器、编译器、调试器和图形用户界面等工具。集成了代码编写功能、分析功能、编译功能、调试功能等一体化的开发软件服务套。所有具备这一特性的软件或者软件套（组）都可以叫集成开发环境。如微软的Visual Studio系列，Borland的C++ Builder、Delphi系列等。该程序可以独立运行，也可以和其它程序并用。IDE多被用于开发HTML应用软件。例如，许多人在设计网站时使用IDE（如HomeSite、DreamWeaver等），因为很多项任务会自动生成。——百度百科</p>
</blockquote>
<p>简单的说，就是你编写、调试、编译代码的地方，下面推荐几个个写C++最常用的IDE.</p>
<hr>
<h2 id="dev-c">DEV-C++</h2>
<p>适合初学者，~~不过我一直都在用，~~界面较为简洁，只需要下载使用就行了，什么头文件一些乱七八糟的东西已经帮你配置好了。</p>
<p>下载网址链接：<a href="https://sourceforge.net/projects/orwelldevcpp/">Dev-C++ download | SourceForge.net</a></p>
<p>步骤：</p>
<p>1.点击Download下载</p>
<figure data-type="image" tabindex="1"><img src="https://appdocs.wpscdn.cn/api/v3/office/copy/TEREYmZIVnRUVXdVQVp4VTUvcUNzcmROaGF2c0NSeVBUUmZ2c00vWTNIZXlMcExMd3ZxVmt3S3lqd0ZHT0g4RFIvK2V2Wi9UaDl5VVBXb05vS3prWThQdHdiQWxXUlhmVlhEUTdJMHd0eTdnMWxsMHFVTUZ1TjViNDhGbDJCa2dwYXZDK1NWYzViNFVvODc3Z0tCWnhjMDJMdDBQU1BUS2tza3pvaW8wQlo0YVZzVUxiTGxNVmJTMmxab2RoQnR0ejExcElqSWtURkljVUo1SzhQUVYwZnRLM1FONzM3SjNLdm5tV0c5c1VPRHRpUFBHMFpvSDVqQndyQzE3Z2JjOVRsaC9kNDlOTmMxd1JyNTdXbDFYbmk4RDRaUGtiNFJnNHFXcDFOQXB5QnhhZldBMzl3eFVyTmR3RzRUNQ==/attach/object/B5PMKAYAJ4" alt="" loading="lazy"></figure>
<p>2.到你的下载文件夹里双击刚刚下载的应用程序</p>
<figure data-type="image" tabindex="2"><img src="https://appdocs.wpscdn.cn/api/v3/office/copy/TEREYmZIVnRUVXdVQVp4VTUvcUNzcmROaGF2c0NSeVBUUmZ2c00vWTNIZXlMcExMd3ZxVmt3S3lqd0ZHT0g4RFIvK2V2Wi9UaDl5VVBXb05vS3prWThQdHdiQWxXUlhmVlhEUTdJMHd0eTdnMWxsMHFVTUZ1TjViNDhGbDJCa2dwYXZDK1NWYzViNFVvODc3Z0tCWnhjMDJMdDBQU1BUS2tza3pvaW8wQlo0YVZzVUxiTGxNVmJTMmxab2RoQnR0ejExcElqSWtURkljVUo1SzhQUVYwZnRLM1FONzM3SjNLdm5tV0c5c1VPRHRpUFBHMFpvSDVqQndyQzE3Z2JjOVRsaC9kNDlOTmMxd1JyNTdXbDFYbmk4RDRaUGtiNFJnNHFXcDFOQXB5QnhhZldBMzl3eFVyTmR3RzRUNQ==/attach/object/RJPMKAYAO4" alt="" loading="lazy"></figure>
<p>然后耐心地等它加载</p>
<figure data-type="image" tabindex="3"><img src="https://appdocs.wpscdn.cn/api/v3/office/copy/TEREYmZIVnRUVXdVQVp4VTUvcUNzcmROaGF2c0NSeVBUUmZ2c00vWTNIZXlMcExMd3ZxVmt3S3lqd0ZHT0g4RFIvK2V2Wi9UaDl5VVBXb05vS3prWThQdHdiQWxXUlhmVlhEUTdJMHd0eTdnMWxsMHFVTUZ1TjViNDhGbDJCa2dwYXZDK1NWYzViNFVvODc3Z0tCWnhjMDJMdDBQU1BUS2tza3pvaW8wQlo0YVZzVUxiTGxNVmJTMmxab2RoQnR0ejExcElqSWtURkljVUo1SzhQUVYwZnRLM1FONzM3SjNLdm5tV0c5c1VPRHRpUFBHMFpvSDVqQndyQzE3Z2JjOVRsaC9kNDlOTmMxd1JyNTdXbDFYbmk4RDRaUGtiNFJnNHFXcDFOQXB5QnhhZldBMzl3eFVyTmR3RzRUNQ==/attach/object/B5P4KAYA44" alt="" loading="lazy"></figure>
<p>3.选择语言，先选择English（因为没有简体中文），然后点OK</p>
<figure data-type="image" tabindex="4"><img src="https://appdocs.wpscdn.cn/api/v3/office/copy/TEREYmZIVnRUVXdVQVp4VTUvcUNzcmROaGF2c0NSeVBUUmZ2c00vWTNIZXlMcExMd3ZxVmt3S3lqd0ZHT0g4RFIvK2V2Wi9UaDl5VVBXb05vS3prWThQdHdiQWxXUlhmVlhEUTdJMHd0eTdnMWxsMHFVTUZ1TjViNDhGbDJCa2dwYXZDK1NWYzViNFVvODc3Z0tCWnhjMDJMdDBQU1BUS2tza3pvaW8wQlo0YVZzVUxiTGxNVmJTMmxab2RoQnR0ejExcElqSWtURkljVUo1SzhQUVYwZnRLM1FONzM3SjNLdm5tV0c5c1VPRHRpUFBHMFpvSDVqQndyQzE3Z2JjOVRsaC9kNDlOTmMxd1JyNTdXbDFYbmk4RDRaUGtiNFJnNHFXcDFOQXB5QnhhZldBMzl3eFVyTmR3RzRUNQ==/attach/object/MRP4KAYADM" alt="" loading="lazy"></figure>
<p>4.点击I Agree</p>
<figure data-type="image" tabindex="5"><img src="https://appdocs.wpscdn.cn/api/v3/office/copy/TEREYmZIVnRUVXdVQVp4VTUvcUNzcmROaGF2c0NSeVBUUmZ2c00vWTNIZXlMcExMd3ZxVmt3S3lqd0ZHT0g4RFIvK2V2Wi9UaDl5VVBXb05vS3prWThQdHdiQWxXUlhmVlhEUTdJMHd0eTdnMWxsMHFVTUZ1TjViNDhGbDJCa2dwYXZDK1NWYzViNFVvODc3Z0tCWnhjMDJMdDBQU1BUS2tza3pvaW8wQlo0YVZzVUxiTGxNVmJTMmxab2RoQnR0ejExcElqSWtURkljVUo1SzhQUVYwZnRLM1FONzM3SjNLdm5tV0c5c1VPRHRpUFBHMFpvSDVqQndyQzE3Z2JjOVRsaC9kNDlOTmMxd1JyNTdXbDFYbmk4RDRaUGtiNFJnNHFXcDFOQXB5QnhhZldBMzl3eFVyTmR3RzRUNQ==/attach/object/SRP4KAYAVQ" alt="" loading="lazy"></figure>
<p>5.后面这些默认的东西不要管他，直接点Next</p>
<figure data-type="image" tabindex="6"><img src="https://appdocs.wpscdn.cn/api/v3/office/copy/TEREYmZIVnRUVXdVQVp4VTUvcUNzcmROaGF2c0NSeVBUUmZ2c00vWTNIZXlMcExMd3ZxVmt3S3lqd0ZHT0g4RFIvK2V2Wi9UaDl5VVBXb05vS3prWThQdHdiQWxXUlhmVlhEUTdJMHd0eTdnMWxsMHFVTUZ1TjViNDhGbDJCa2dwYXZDK1NWYzViNFVvODc3Z0tCWnhjMDJMdDBQU1BUS2tza3pvaW8wQlo0YVZzVUxiTGxNVmJTMmxab2RoQnR0ejExcElqSWtURkljVUo1SzhQUVYwZnRLM1FONzM3SjNLdm5tV0c5c1VPRHRpUFBHMFpvSDVqQndyQzE3Z2JjOVRsaC9kNDlOTmMxd1JyNTdXbDFYbmk4RDRaUGtiNFJnNHFXcDFOQXB5QnhhZldBMzl3eFVyTmR3RzRUNQ==/attach/object/6ZP4KAYAM4" alt="" loading="lazy"></figure>
<p>6.确认好你的安装路径，然后点Install开始安装</p>
<figure data-type="image" tabindex="7"><img src="https://appdocs.wpscdn.cn/api/v3/office/copy/TEREYmZIVnRUVXdVQVp4VTUvcUNzcmROaGF2c0NSeVBUUmZ2c00vWTNIZXlMcExMd3ZxVmt3S3lqd0ZHT0g4RFIvK2V2Wi9UaDl5VVBXb05vS3prWThQdHdiQWxXUlhmVlhEUTdJMHd0eTdnMWxsMHFVTUZ1TjViNDhGbDJCa2dwYXZDK1NWYzViNFVvODc3Z0tCWnhjMDJMdDBQU1BUS2tza3pvaW8wQlo0YVZzVUxiTGxNVmJTMmxab2RoQnR0ejExcElqSWtURkljVUo1SzhQUVYwZnRLM1FONzM3SjNLdm5tV0c5c1VPRHRpUFBHMFpvSDVqQndyQzE3Z2JjOVRsaC9kNDlOTmMxd1JyNTdXbDFYbmk4RDRaUGtiNFJnNHFXcDFOQXB5QnhhZldBMzl3eFVyTmR3RzRUNQ==/attach/object/IFQMKAYAEQ" alt="" loading="lazy"></figure>
<p>7.耐心等待......</p>
<figure data-type="image" tabindex="8"><img src="https://appdocs.wpscdn.cn/api/v3/office/copy/TEREYmZIVnRUVXdVQVp4VTUvcUNzcmROaGF2c0NSeVBUUmZ2c00vWTNIZXlMcExMd3ZxVmt3S3lqd0ZHT0g4RFIvK2V2Wi9UaDl5VVBXb05vS3prWThQdHdiQWxXUlhmVlhEUTdJMHd0eTdnMWxsMHFVTUZ1TjViNDhGbDJCa2dwYXZDK1NWYzViNFVvODc3Z0tCWnhjMDJMdDBQU1BUS2tza3pvaW8wQlo0YVZzVUxiTGxNVmJTMmxab2RoQnR0ejExcElqSWtURkljVUo1SzhQUVYwZnRLM1FONzM3SjNLdm5tV0c5c1VPRHRpUFBHMFpvSDVqQndyQzE3Z2JjOVRsaC9kNDlOTmMxd1JyNTdXbDFYbmk4RDRaUGtiNFJnNHFXcDFOQXB5QnhhZldBMzl3eFVyTmR3RzRUNQ==/attach/object/B5Q4KAYADA" alt="" loading="lazy"></figure>
<p>8.选择Run Dev-C++ 5.11，然后点Finish</p>
<figure data-type="image" tabindex="9"><img src="https://appdocs.wpscdn.cn/api/v3/office/copy/TEREYmZIVnRUVXdVQVp4VTUvcUNzcmROaGF2c0NSeVBUUmZ2c00vWTNIZXlMcExMd3ZxVmt3S3lqd0ZHT0g4RFIvK2V2Wi9UaDl5VVBXb05vS3prWThQdHdiQWxXUlhmVlhEUTdJMHd0eTdnMWxsMHFVTUZ1TjViNDhGbDJCa2dwYXZDK1NWYzViNFVvODc3Z0tCWnhjMDJMdDBQU1BUS2tza3pvaW8wQlo0YVZzVUxiTGxNVmJTMmxab2RoQnR0ejExcElqSWtURkljVUo1SzhQUVYwZnRLM1FONzM3SjNLdm5tV0c5c1VPRHRpUFBHMFpvSDVqQndyQzE3Z2JjOVRsaC9kNDlOTmMxd1JyNTdXbDFYbmk4RDRaUGtiNFJnNHFXcDFOQXB5QnhhZldBMzl3eFVyTmR3RzRUNQ==/attach/object/MZQ4KAYAWQ" alt="" loading="lazy"></figure>
<p>9.首次打开C++后开始配置，语言选简体中文/Chinese</p>
<figure data-type="image" tabindex="10"><img src="https://appdocs.wpscdn.cn/api/v3/office/copy/TEREYmZIVnRUVXdVQVp4VTUvcUNzcmROaGF2c0NSeVBUUmZ2c00vWTNIZXlMcExMd3ZxVmt3S3lqd0ZHT0g4RFIvK2V2Wi9UaDl5VVBXb05vS3prWThQdHdiQWxXUlhmVlhEUTdJMHd0eTdnMWxsMHFVTUZ1TjViNDhGbDJCa2dwYXZDK1NWYzViNFVvODc3Z0tCWnhjMDJMdDBQU1BUS2tza3pvaW8wQlo0YVZzVUxiTGxNVmJTMmxab2RoQnR0ejExcElqSWtURkljVUo1SzhQUVYwZnRLM1FONzM3SjNLdm5tV0c5c1VPRHRpUFBHMFpvSDVqQndyQzE3Z2JjOVRsaC9kNDlOTmMxd1JyNTdXbDFYbmk4RDRaUGtiNFJnNHFXcDFOQXB5QnhhZldBMzl3eFVyTmR3RzRUNQ==/attach/object/VZQ4KAYAJ4" alt="" loading="lazy"></figure>
<p>10.然后选择字体和颜色，建议默认，然后点Next</p>
<figure data-type="image" tabindex="11"><img src="https://appdocs.wpscdn.cn/api/v3/office/copy/TEREYmZIVnRUVXdVQVp4VTUvcUNzcmROaGF2c0NSeVBUUmZ2c00vWTNIZXlMcExMd3ZxVmt3S3lqd0ZHT0g4RFIvK2V2Wi9UaDl5VVBXb05vS3prWThQdHdiQWxXUlhmVlhEUTdJMHd0eTdnMWxsMHFVTUZ1TjViNDhGbDJCa2dwYXZDK1NWYzViNFVvODc3Z0tCWnhjMDJMdDBQU1BUS2tza3pvaW8wQlo0YVZzVUxiTGxNVmJTMmxab2RoQnR0ejExcElqSWtURkljVUo1SzhQUVYwZnRLM1FONzM3SjNLdm5tV0c5c1VPRHRpUFBHMFpvSDVqQndyQzE3Z2JjOVRsaC9kNDlOTmMxd1JyNTdXbDFYbmk4RDRaUGtiNFJnNHFXcDFOQXB5QnhhZldBMzl3eFVyTmR3RzRUNQ==/attach/object/2VQ4KAYAEE" alt="" loading="lazy"></figure>
<p>11.这样就配置成功了，点OK</p>
<figure data-type="image" tabindex="12"><img src="https://appdocs.wpscdn.cn/api/v3/office/copy/TEREYmZIVnRUVXdVQVp4VTUvcUNzcmROaGF2c0NSeVBUUmZ2c00vWTNIZXlMcExMd3ZxVmt3S3lqd0ZHT0g4RFIvK2V2Wi9UaDl5VVBXb05vS3prWThQdHdiQWxXUlhmVlhEUTdJMHd0eTdnMWxsMHFVTUZ1TjViNDhGbDJCa2dwYXZDK1NWYzViNFVvODc3Z0tCWnhjMDJMdDBQU1BUS2tza3pvaW8wQlo0YVZzVUxiTGxNVmJTMmxab2RoQnR0ejExcElqSWtURkljVUo1SzhQUVYwZnRLM1FONzM3SjNLdm5tV0c5c1VPRHRpUFBHMFpvSDVqQndyQzE3Z2JjOVRsaC9kNDlOTmMxd1JyNTdXbDFYbmk4RDRaUGtiNFJnNHFXcDFOQXB5QnhhZldBMzl3eFVyTmR3RzRUNQ==/attach/object/DFRMKAYBDI" alt="" loading="lazy"></figure>
<p>12.就会出现如下的界面，这就是我们写代码的界面了</p>
<figure data-type="image" tabindex="13"><img src="https://appdocs.wpscdn.cn/api/v3/office/copy/TEREYmZIVnRUVXdVQVp4VTUvcUNzcmROaGF2c0NSeVBUUmZ2c00vWTNIZXlMcExMd3ZxVmt3S3lqd0ZHT0g4RFIvK2V2Wi9UaDl5VVBXb05vS3prWThQdHdiQWxXUlhmVlhEUTdJMHd0eTdnMWxsMHFVTUZ1TjViNDhGbDJCa2dwYXZDK1NWYzViNFVvODc3Z0tCWnhjMDJMdDBQU1BUS2tza3pvaW8wQlo0YVZzVUxiTGxNVmJTMmxab2RoQnR0ejExcElqSWtURkljVUo1SzhQUVYwZnRLM1FONzM3SjNLdm5tV0c5c1VPRHRpUFBHMFpvSDVqQndyQzE3Z2JjOVRsaC9kNDlOTmMxd1JyNTdXbDFYbmk4RDRaUGtiNFJnNHFXcDFOQXB5QnhhZldBMzl3eFVyTmR3RzRUNQ==/attach/object/SRRMKAYBLE" alt="" loading="lazy"></figure>
<p>13.按Ctrl+N新建一个源代码，写上你的代码吧</p>
<figure data-type="image" tabindex="14"><img src="https://appdocs.wpscdn.cn/api/v3/office/copy/TEREYmZIVnRUVXdVQVp4VTUvcUNzcmROaGF2c0NSeVBUUmZ2c00vWTNIZXlMcExMd3ZxVmt3S3lqd0ZHT0g4RFIvK2V2Wi9UaDl5VVBXb05vS3prWThQdHdiQWxXUlhmVlhEUTdJMHd0eTdnMWxsMHFVTUZ1TjViNDhGbDJCa2dwYXZDK1NWYzViNFVvODc3Z0tCWnhjMDJMdDBQU1BUS2tza3pvaW8wQlo0YVZzVUxiTGxNVmJTMmxab2RoQnR0ejExcElqSWtURkljVUo1SzhQUVYwZnRLM1FONzM3SjNLdm5tV0c5c1VPRHRpUFBHMFpvSDVqQndyQzE3Z2JjOVRsaC9kNDlOTmMxd1JyNTdXbDFYbmk4RDRaUGtiNFJnNHFXcDFOQXB5QnhhZldBMzl3eFVyTmR3RzRUNQ==/attach/object/JBR4KAYADI" alt="" loading="lazy"></figure>
<p>14.按Ctrl+S保存一下，然后点顶部工具栏的编译运行图标，即可编译然后运行</p>
<figure data-type="image" tabindex="15"><img src="https://appdocs.wpscdn.cn/api/v3/office/copy/TEREYmZIVnRUVXdVQVp4VTUvcUNzcmROaGF2c0NSeVBUUmZ2c00vWTNIZXlMcExMd3ZxVmt3S3lqd0ZHT0g4RFIvK2V2Wi9UaDl5VVBXb05vS3prWThQdHdiQWxXUlhmVlhEUTdJMHd0eTdnMWxsMHFVTUZ1TjViNDhGbDJCa2dwYXZDK1NWYzViNFVvODc3Z0tCWnhjMDJMdDBQU1BUS2tza3pvaW8wQlo0YVZzVUxiTGxNVmJTMmxab2RoQnR0ejExcElqSWtURkljVUo1SzhQUVYwZnRLM1FONzM3SjNLdm5tV0c5c1VPRHRpUFBHMFpvSDVqQndyQzE3Z2JjOVRsaC9kNDlOTmMxd1JyNTdXbDFYbmk4RDRaUGtiNFJnNHFXcDFOQXB5QnhhZldBMzl3eFVyTmR3RzRUNQ==/attach/object/ZZR4KAYADA" alt="" loading="lazy"></figure>
<p>15.如果编译出代码没有问题，界面底部就是这样的</p>
<figure data-type="image" tabindex="16"><img src="https://appdocs.wpscdn.cn/api/v3/office/copy/TEREYmZIVnRUVXdVQVp4VTUvcUNzcmROaGF2c0NSeVBUUmZ2c00vWTNIZXlMcExMd3ZxVmt3S3lqd0ZHT0g4RFIvK2V2Wi9UaDl5VVBXb05vS3prWThQdHdiQWxXUlhmVlhEUTdJMHd0eTdnMWxsMHFVTUZ1TjViNDhGbDJCa2dwYXZDK1NWYzViNFVvODc3Z0tCWnhjMDJMdDBQU1BUS2tza3pvaW8wQlo0YVZzVUxiTGxNVmJTMmxab2RoQnR0ejExcElqSWtURkljVUo1SzhQUVYwZnRLM1FONzM3SjNLdm5tV0c5c1VPRHRpUFBHMFpvSDVqQndyQzE3Z2JjOVRsaC9kNDlOTmMxd1JyNTdXbDFYbmk4RDRaUGtiNFJnNHFXcDFOQXB5QnhhZldBMzl3eFVyTmR3RzRUNQ==/attach/object/IBSMKAYAMM" alt="" loading="lazy"></figure>
<p>紧接着会跳出一个命令提示符，你就可以根据代码在里面输入输出了</p>
<figure data-type="image" tabindex="17"><img src="https://appdocs.wpscdn.cn/api/v3/office/copy/TEREYmZIVnRUVXdVQVp4VTUvcUNzcmROaGF2c0NSeVBUUmZ2c00vWTNIZXlMcExMd3ZxVmt3S3lqd0ZHT0g4RFIvK2V2Wi9UaDl5VVBXb05vS3prWThQdHdiQWxXUlhmVlhEUTdJMHd0eTdnMWxsMHFVTUZ1TjViNDhGbDJCa2dwYXZDK1NWYzViNFVvODc3Z0tCWnhjMDJMdDBQU1BUS2tza3pvaW8wQlo0YVZzVUxiTGxNVmJTMmxab2RoQnR0ejExcElqSWtURkljVUo1SzhQUVYwZnRLM1FONzM3SjNLdm5tV0c5c1VPRHRpUFBHMFpvSDVqQndyQzE3Z2JjOVRsaC9kNDlOTmMxd1JyNTdXbDFYbmk4RDRaUGtiNFJnNHFXcDFOQXB5QnhhZldBMzl3eFVyTmR3RzRUNQ==/attach/object/MVSMKAYAH4" alt="" loading="lazy"></figure>
<p>*如果代码有问题，会报错，界面如下</p>
<figure data-type="image" tabindex="18"><img src="https://appdocs.wpscdn.cn/api/v3/office/copy/TEREYmZIVnRUVXdVQVp4VTUvcUNzcmROaGF2c0NSeVBUUmZ2c00vWTNIZXlMcExMd3ZxVmt3S3lqd0ZHT0g4RFIvK2V2Wi9UaDl5VVBXb05vS3prWThQdHdiQWxXUlhmVlhEUTdJMHd0eTdnMWxsMHFVTUZ1TjViNDhGbDJCa2dwYXZDK1NWYzViNFVvODc3Z0tCWnhjMDJMdDBQU1BUS2tza3pvaW8wQlo0YVZzVUxiTGxNVmJTMmxab2RoQnR0ejExcElqSWtURkljVUo1SzhQUVYwZnRLM1FONzM3SjNLdm5tV0c5c1VPRHRpUFBHMFpvSDVqQndyQzE3Z2JjOVRsaC9kNDlOTmMxd1JyNTdXbDFYbmk4RDRaUGtiNFJnNHFXcDFOQXB5QnhhZldBMzl3eFVyTmR3RzRUNQ==/attach/object/3JSMKAYALM" alt="" loading="lazy"></figure>
<p>你就可以根据编译结果来发现代码的错误并改正</p>
<hr>
<h2 id="其他">其他</h2>
<p>还有一些比较高端的编译器这里就不具体介绍了，举几个例子</p>
<h3 id="visual-studio-code">Visual Studio Code</h3>
<figure data-type="image" tabindex="19"><img src="https://appdocs.wpscdn.cn/api/v3/office/copy/TEREYmZIVnRUVXdVQVp4VTUvcUNzcmROaGF2c0NSeVBUUmZ2c00vWTNIZXlMcExMd3ZxVmt3S3lqd0ZHT0g4RFIvK2V2Wi9UaDl5VVBXb05vS3prWThQdHdiQWxXUlhmVlhEUTdJMHd0eTdnMWxsMHFVTUZ1TjViNDhGbDJCa2dwYXZDK1NWYzViNFVvODc3Z0tCWnhjMDJMdDBQU1BUS2tza3pvaW8wQlo0YVZzVUxiTGxNVmJTMmxab2RoQnR0ejExcElqSWtURkljVUo1SzhQUVYwZnRLM1FONzM3SjNLdm5tV0c5c1VPRHRpUFBHMFpvSDVqQndyQzE3Z2JjOVRsaC9kNDlOTmMxd1JyNTdXbDFYbmk4RDRaUGtiNFJnNHFXcDFOQXB5QnhhZldBMzl3eFVyTmR3RzRUNQ==/attach/object/SJTMKAYADI" alt="" loading="lazy"></figure>
<p>下载网址：<a href="https://code.visualstudio.com/">Visual Studio Code - Code Editing. Redefined</a></p>
<p>安装教程：<a href="https://so.csdn.net/so/search?spm=1000.2115.3001.7498&amp;q=vscode%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B&amp;t=&amp;u=&amp;utm_term=vscode%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B&amp;utm_medium=distribute.pc_toolbar_associateword.none-task-associate_word-opensearch_query-5-%3Cem%3Evs%3C%2Fem%3Ecode%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B-null-null.179%5Ev5%5Epv&amp;depth_1-utm_source=distribute.pc_toolbar_associateword.none-task-associate_word-opensearch_query-5-%3Cem%3Evs%3C%2Fem%3Ecode%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B-null-null.179%5Ev5%5Epv&amp;request_id=167257443216800186596406&amp;opensearch_request_id=167257443216800186596406">vscode安装教程- CSDN搜索</a></p>
<h3 id="clion">CLion</h3>
<figure data-type="image" tabindex="20"><img src="https://appdocs.wpscdn.cn/api/v3/office/copy/TEREYmZIVnRUVXdVQVp4VTUvcUNzcmROaGF2c0NSeVBUUmZ2c00vWTNIZXlMcExMd3ZxVmt3S3lqd0ZHT0g4RFIvK2V2Wi9UaDl5VVBXb05vS3prWThQdHdiQWxXUlhmVlhEUTdJMHd0eTdnMWxsMHFVTUZ1TjViNDhGbDJCa2dwYXZDK1NWYzViNFVvODc3Z0tCWnhjMDJMdDBQU1BUS2tza3pvaW8wQlo0YVZzVUxiTGxNVmJTMmxab2RoQnR0ejExcElqSWtURkljVUo1SzhQUVYwZnRLM1FONzM3SjNLdm5tV0c5c1VPRHRpUFBHMFpvSDVqQndyQzE3Z2JjOVRsaC9kNDlOTmMxd1JyNTdXbDFYbmk4RDRaUGtiNFJnNHFXcDFOQXB5QnhhZldBMzl3eFVyTmR3RzRUNQ==/attach/object/WRT4KAYAA4" alt="" loading="lazy"></figure>
<p>下载网址：<a href="https://www.jetbrains.com/zh-cn/clion/download/#section=windows">下载 CLion：用于 C/C++ 开发的智能跨平台 IDE (jetbrains.com)</a></p>
<p>安装教程：<a href="https://so.csdn.net/so/search?spm=1000.2115.3001.7498&amp;q=clion%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B&amp;t=&amp;u=&amp;utm_term=clion%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B&amp;utm_medium=distribute.pc_toolbar_associateword.none-task-associate_word-opensearch_query-1-%3Cem%3Eclion%3C%2Fem%3E%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B-null-null.179%5Ev5%5Epv&amp;depth_1-utm_source=distribute.pc_toolbar_associateword.none-task-associate_word-opensearch_query-1-%3Cem%3Eclion%3C%2Fem%3E%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B-null-null.179%5Ev5%5Epv&amp;request_id=167271864016800225597041&amp;opensearch_request_id=167271864016800225597041">clion安装教程- CSDN搜索</a></p>
<hr>
<p>本篇文章就到这里了，喜欢的就请点赞、收藏、打赏，关注我，有问题可以评论或私聊我，我们下篇文章再见😄</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[初级-Part1-语言基础-C++简介]]></title>
        <id>https://chentianyicty6330.github.io/post/primary-p1-language-basis-c-introduction/</id>
        <link href="https://chentianyicty6330.github.io/post/primary-p1-language-basis-c-introduction/">
        </link>
        <updated>2023-01-29T01:50:26.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>以下内容转载于百度百科（有删减）</p>
</blockquote>
<p>C++是一种计算机高级程序设计语言，由C语言扩展升级而产生 ，最早于1979年由本贾尼·斯特劳斯特卢普在AT&amp;T贝尔工作室研发。</p>
<p>C++既可以进行C语言的过程化程序设计，又可以进行以抽象数据类型为特点的基于对象的程序设计，还可以进行以继承和多态为特点的面向对象的程序设计。C++擅长面向对象程序设计的同时，还可以进行基于过程的程序设计。</p>
<p>C++拥有计算机运行的实用性特征，同时还致力于提高大规模程序的编程质量与程序设计语言的问题描述能力。</p>
<hr>
<h2 id="发展历程">发展历程</h2>
<p>1970年，AT&amp;T贝尔实验室的工作人员D.Ritchie和K.Thompson共同研发了C语言。研制C语言的初衷是用它编写UNIX系统程序，因此，实际上C语言是UNIX的“副产品”。</p>
<p>1971年，瑞士联邦技术学院N.Wirth教授发明了第一个结构化的编程语言Pascal。</p>
<p>20世纪70年代中期，本贾尼·斯特劳斯特卢普在剑桥大学计算机中心工作。斯特劳斯特卢普希望开发一个既要编程简单、正确可靠，又要运行高效、可移植的计算机程序设计语言。而以C语言为背景，以Simula思想为基础的语言，正好符合斯特劳斯特卢普的初衷和设想。</p>
<p>1979年，本贾尼·斯特劳斯特卢普到了AT&amp;T贝尔实验室，开始从事将C改良为带类的C（C with classes）的工作。、1983年，该语言被正式命名为C++。</p>
<p>1985年、1990年和1994年，C++先后进行3次主要修订。</p>
<p>C++的标准化工作于1989年开始，并成立了一个ANSI和ISO（International Standards Organization）国际标准化组织的联合标准化委员会。</p>
<p>1994年1月25曰，联合标准化委员会提出了第一个标准化草案。在该草案中，委员会在保持斯特劳斯特卢普最初定义的所有特征的同时，还增加了部分新特征。</p>
<p>在完成C++标准化的第一个草案后不久，亚历山大·斯特潘诺夫（Alexander Stepanov）创建了标准模板库（Standard Template Library，STL）。在通过了标准化第一个草案之后，联合标准化委员会投票并通过了将STL包含到C++标准中的提议。STL对C++的扩展超出了C++的最初定义范围。虽然在标准中增加STL是个很重要的决定，但也因此延缓了C++标准化的进程。</p>
<p>1997年11月14日，联合标准化委员会通过了该标准的最终草案，</p>
<p>1998年，C++的ANSI/IS0标准被投入使用。</p>
<hr>
<h2 id="语言标准">语言标准</h2>
<p>自C++的ANSI/IS0标准投用以来，共进行过5次更新。</p>
<p><strong>C++语言标准更新记录</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left"><strong>标准版本</strong></th>
<th style="text-align:left"><strong>发布时间</strong></th>
<th style="text-align:left"><strong>正式名称</strong></th>
<th style="text-align:left"><strong>更新内容</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">C++ 03</td>
<td style="text-align:left">2003年</td>
<td style="text-align:left">ISO/IEC 14882:2003</td>
<td style="text-align:left">对C++ 98版本的漏洞做了部分修改。</td>
</tr>
<tr>
<td style="text-align:left">C++ 11</td>
<td style="text-align:left">2011年8月12日</td>
<td style="text-align:left">ISO/IEC 14882:2011</td>
<td style="text-align:left">对容器类的方法做了三项主要修改：</td>
</tr>
<tr>
<td style="text-align:left">C++ 14</td>
<td style="text-align:left">2014年8月18日</td>
<td style="text-align:left">ISO/IEC 14882:2014</td>
<td style="text-align:left">C++11的增量更新。主要是支持普通函数的返回类型推演，泛型lambda，扩展的lambda捕获，对constexpr函数限制的修订，constexpr变量模板化等。</td>
</tr>
<tr>
<td style="text-align:left">C++ 17</td>
<td style="text-align:left">2017年12月6日</td>
<td style="text-align:left">ISO/IEC 14882:2017</td>
<td style="text-align:left">新增UTF-8 字符文字、折叠表达式（fold expressions）：用于可变的模板、内联变量（inline variables）：允许在头文件中定义变量；在if和switch语句内可以初始化变量；结构化绑定（Structured Binding）：for（auto [key,value] : my_map）{…}；类模板参数规约（Class Template Argument Deduction）：用pair p{1, 2.0}; 替代pair{1, 2.0};；&amp;gt;；static_assert的文本信息可选；删除trigraphs；在模板参数中允许使用typename（作为替代类）；来自 braced-init-list 的新规则用于自动推导；嵌套命名空间的定义；允许命名空间和枚举器的属性；新的标准属性：[[fallthrough]], [[maybe_unused]] 和 [[nodiscard]]；对所有非类型模板参数进行常量评估；Fold表达式，用于可变的模板；A compile-time static if with the form if constexpr（expression）；结构化的绑定声明，允许auto [a, b]=getTwoReturnValues（）。</td>
</tr>
<tr>
<td style="text-align:left">C++ 20</td>
<td style="text-align:left">2020年12月7日</td>
<td style="text-align:left">ISO/IEC 14882:2020</td>
<td style="text-align:left">新增模块（Modules）、协程（Coroutines）、范围 （Ranges）、概念与约束 （Constraints and concepts）、指定初始化 (designated initializers）、操作符“&lt;=&gt; != ==”；constexpr支持：new/delete、dynamic_cast、try/catch、虚拟、constexpr向量和字符串；计时：日历、时区支持。</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="编程开发">编程开发</h2>
<h3 id="集成开发环境"><strong>集成开发环境</strong></h3>
<p>截至2014年3月，C++共有12个主流集成开发环境。</p>
<table>
<thead>
<tr>
<th style="text-align:left">Visual Studio（Visual C++）</th>
<th style="text-align:left">Dev C++</th>
<th style="text-align:left">C++ Builder</th>
<th style="text-align:left">kDevelop</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Anjuta</td>
<td style="text-align:left">Code::Blocks</td>
<td style="text-align:left">Visual Mingw</td>
<td style="text-align:left">Ideone</td>
</tr>
<tr>
<td style="text-align:left">Eclipse CDT</td>
<td style="text-align:left">Compilr</td>
<td style="text-align:left">Code Lite</td>
<td style="text-align:left">Netbeans C++</td>
</tr>
</tbody>
</table>
<h3 id="编译器"><strong>编译器</strong></h3>
<p>截至2014年3月，C++共有5款主流编译器。</p>
<table>
<thead>
<tr>
<th style="text-align:left">Ultimate++</th>
<th style="text-align:left">Digital Mars</th>
<th style="text-align:left">C-Free</th>
<th style="text-align:left">MinGW</th>
<th style="text-align:left">Tiny C Compiler</th>
</tr>
</thead>
</table>
<hr>
<h2 id="语言特点">语言特点</h2>
<ul>
<li><strong>与C语言的兼容性</strong></li>
</ul>
<p>C++与C语言完全兼容，C语言的绝大部分内容可以直接用于C++的程序设计，用C语言编写的程序可以不加修改地用于C++。</p>
<ul>
<li><strong>数据封装和数据隐藏</strong></li>
</ul>
<p>在C++中，类是支持数据封装的工具，对象则是数据封装的实现。C++通过建立用户定义类支持数据封装和数据隐藏。</p>
<p>在面向对象的程序设计中，将数据和对该数据进行合法操作的函数封装在一起作为一个类的定义。对象被说明为具有一个给定类的变量。每个给定类的对象包含这个类所规定的若干私有成员、公有成员及保护成员。完好定义的类一旦建立，就可看成完全封装的实体，可以作为一个整体单元使用。类的实际内部工作隐藏起来，使用完好定义的类的用户不需要知道类的工作原理，只要知道如何使用它即可。</p>
<ul>
<li><strong>支持继承和重用</strong></li>
</ul>
<p>在C++现有类的基础上可以声明新类型，这就是继承和重用的思想。通过继承和重用可以更有效地组织程序结构，明确类间关系，并且充分利用已有的类来完成更复杂、深入的开发。新定义的类为子类，成为派生类。它可以从父类那里继承所有非私有的属性和方法，作为自己的成员。</p>
<ul>
<li><strong>多态性</strong></li>
</ul>
<p>采用多态性为每个类指定表现行为。多态性形成由父类和它们的子类组成的一个树型结构。在这个树中的每个子类可以接收一个或多个具有相同名字的消息。当一个消息被这个树中一个类的一个对象接收时，这个对象动态地决定给予子类对象的消息的某种用法。多态性的这一特性允许使用高级抽象。</p>
<p>继承性和多态性的组合，可以轻易地生成一系列虽然类似但独一无二的对象。由于继承性，这些对象共享许多相似的特征。由于多态性，一个对象可有独特的表现方式，而另一个对象有另一种表现方式。</p>
<hr>
<h2 id="工作原理">工作原理</h2>
<p>C++语言的程序开发环境，为了方便测试，将调试环境做成了解释型。即开发过程中，以解释型的逐条语句执行方式来进行调试，以编译型的脱离开发环境而启动运行的方式来生成程序最终的执行代码。</p>
<p>开发C++应用程序，需要经过编写源程序、编译、连接程序生成可执行程序、运行程序四个步骤。生成程序是指将源码（C++语句）转换成一个可以运行的应用程序的过程。如果程序编写正确，那么通常只需按一个功能键，即可完成该过程。</p>
<p>第一步对程序进行编译，这需要用到编译器（compiler）。编译器将C++语句转换成机器码（也称为目标码）；如果该步骤成功执行，下一步就是对程序进行链接，这需要用到链接器（linker）。链接器将编译获得机器码与C++库中的代码进行合并。C++库包含了执行某些常见任务的函数（“函数”是子程序的另一种称呼）。例如，一个C++库中包含标准的平方根函数sqrt，所以不必亲自计算平方根。C++库中还包含一些子程序，它们把数据发送到显示器，并知道如何读写硬盘上的数据文件。</p>
<hr>
<h2 id="语言基础">语言基础</h2>
<h3 id="基本类型">基本类型</h3>
<p>C++语言数据类型可以分为两大类：基本类型和引用类型。基本类型是指不能再分解的数据类型，其数据在函数的调用中是以传值方式工作的；引用类型有时也称复合类型，它是可以分解为基本类型的数据类型，其数据在函数调用中是以传址方式来工作的。</p>
<ul>
<li><strong>整型</strong></li>
</ul>
<p>1、整数常量</p>
<p>整数常量是不带小数的数值，用来表示正负数。例2—2中Ox55、0x55ff、1000000都是c++语言的整数常量。</p>
<p>c++语言的整数常量有三种形式：十进制、八进制、十六进制。</p>
<p>（1）十进制整数是由不以0开头的0～9的数字组成的数据。</p>
<p>（2）八进制整数是由以0开头的0～7的数字组成的数据。</p>
<p>（3）十六进制整数是由以0x或0x开头的0～9的数字及A～F的字母(大小写字母均可)组成的数据。</p>
<p>例如：</p>
<p>0，63，83是十进制数。</p>
<p>00，077，0123是八进制数。</p>
<p>0x0，Ox0，0x53，0x53，0x3f，0x3f是十六进制数。</p>
<p>整数常量的取值范围是有限的，它的大小取决于此类整型数的类型，与所使用的进制形式无关。</p>
<p>2、整型变量类型</p>
<p>整型变量类型有byte，short，int，long四种说明符，它们都是有符号整型变量类型。</p>
<p>（1）byte类型</p>
<p>byte类型说明一个带符号的8位整型变量。由于不同的机器对多字节数据的存储方式不同，可能是从低字节向高字节存储，也可能是从高字节向低字节存储。这样，在分析网络协议或文件格式时，为了解决不同机器上的字节存储顺序问题，用byte类型来表示数据是合适的。</p>
<p>（2）short类型</p>
<p>short类型说明一个带符号的16位整型变量。short类型限制了数据的存储应为先高字节，后低字节。</p>
<p>（3）int类型</p>
<p>int类型说明一个带符号的32位整型变量。int类型是一种最丰富、最有效的类型。它最常用于计数、数组访问和整数运算。</p>
<p>（4）long类型</p>
<p>long类型说明一个带符号的64位整型变量。对于大型计算，常常会遇到很大的整数，并超出int所表示的范围，这时要使用long类型。</p>
<ul>
<li><strong>浮点型</strong></li>
</ul>
<p>1、浮点数常量</p>
<p>浮点数是带有小数的十进制数，可用一般表示法或科学记数法表示。0.23f、0.7e-3都是c++语言的浮点数常量。</p>
<p>（1）一般表示法：十进制整数+小数点+十进制小数。</p>
<p>（2）科学记数法：十进制整数+小数点+十进制小数+E（<em>或e</em>）+正负号+指数。</p>
<p>例如：3.14159，0.567，9777.12是一般表示法形式，1.234e5，4.90867e-2是科学记数法形式。</p>
<p>c++语言的浮点数常量在机器中有单精度和双精度之分。单精度以32位形式存放，用f/F做后缀标记(可以省略)；双精度则以64位形式存放。当一个浮点数常量没有特别指定精度时，则它为双精度浮点数常量。</p>
<p>2、浮点变量类型</p>
<p>浮点变量也称实数变量，用于需要精确到小数的函数运算中，有float和double两种类型说明符。</p>
<p>（1）float类型</p>
<p>float类型是一个位数为32位的单精度浮点数。它具有运行速度较快，占用空间较少的特点。</p>
<p>（2）double类型</p>
<p>double类型是一个位数为64的双精度浮点数。双精度数在某些具有优化和高速运算能力的现代处理机上运算比单精度数快。双精度类型double比单精度类型float具有更高的精度和更大表示范围，常常使用。</p>
<ul>
<li><strong>字符型</strong></li>
</ul>
<p>1、字符型常量</p>
<p>字符型常量是指由单引号括起来的单个字符。</p>
<p>例如：’a’，’A’，’z’，‘$’，’?’。</p>
<p>注意：’a’和’A’是两个不同的字符常量。</p>
<p>除了以上形式的字符常量外，c++语言还允许使用一种以“\”开头的特殊形式的字符常量。这种字符常量称为转义字符，用来表示一些不可显示的或有特殊意义的字符。</p>
<p>2、字符型变量</p>
<p>字符型变量的类型说明符为char，它在机器中占8位，其范围为0～255。</p>
<p>注意：字符型变量只能存放一个字符，不能存放多个字符，例如：</p>
<pre><code>char a='am';
</code></pre>
<p>这样定义赋值是错误的。</p>
<ul>
<li><strong>布尔型</strong></li>
</ul>
<p>布尔常量只有两个值：“true”和“false”，表示“真”和“假”，均为关键词，在机器中位长为8位。</p>
<p>布尔型变量的类型说明符为booI，用来表示逻辑值。</p>
<h3 id="运算符与表达式">运算符与表达式</h3>
<p>C++语言中定义了丰富的运算符，如算术运算符、关系运算符、逻辑运算符等等，有些运算符需要两个操作数，使用形式为：&lt;操作数1&gt;运算符&lt;操作数2&gt;，这样的运算符称为二元运算符（<em>或二目运算符</em>）。另一些运算符只需要一个操作数，称为一元运算符（<em>或单目运算符</em>）。</p>
<p>运算符具有优先级与结合性。当一个表达式包含多个运算符时，先进行优先级高的运算，再进行优先级低的运算。如果表达式中出现了多个相同优先级的运算，运算顺序就要看运算符的结合性了。所谓结合性，是指当一个操作数左右两边的运算符优先级相同时，按什么样的顺序进行运算，是自左向右，还是自右向左。例如，我们熟悉的算术表达式6+5-2中,“+”、 “-”是同级运算符，那么是先算5-2，还是先算6+5？这就取决于算术运算符的结合性。由于算术运算符的结合性为自左向右，所以应先算6+5，然后再算11-2。</p>
<ul>
<li><strong>算术运算符与算术表达式</strong></li>
</ul>
<p>C++中的算术运算符包括基本的算术运算符和自增、自减运算符。由算术运算符、操作数和括号构成的表达式称为算术表达式。</p>
<p>基本算术运算符有：+（<em>加</em>）、-（减或负号）、*（乘）、/（除）、%（取余）。其中“-”作为负号时为一元运算符，其余都为二元运算符。这些基本算术运算符的意义与数学中相应符号的意义是一致的。它们之间的相对优先级关系与数学中的也是一致的，即先乘除、后加减，同级运算自左向右进行。使用算术运算符要注意以下几点：</p>
<p>1、“%”是取余运算，只能用于整型操作数。表达式a%b的结果为a/b的余数。 “%”的优先级与“/”相同。</p>
<p>2、当“/”用于两整型操作数相除时，其结果取商的整数部分，小数部分被自动舍弃。因此，表达式1/2的结果为0，这一点需要特别注意。</p>
<p>3、C++中的“++” （<em>自增</em>）、 “--” （<em>自减</em>）运算符是使用方便且效率很高的两个运算符，它们都是一元运算符。</p>
<p>这两个运算符都有前置和后置两种使用形式，无论写成前置或后置的形式，它们的作用都是将操作数的值增1（<em>减1</em>）后，重新写回该操作数在内存中的原有位置。所以，如果变量i原来的值是1，计算表达式i++后，表达式的结果为2，并且i的值也被改变为2。但是，当自增、自减运算的结果要被用于继续参与其它操作时，前置与后置时的情况就完全不同。例如，如果i的值为l，则</p>
<pre><code>cout&lt;&lt;i++；
cout&lt;&lt;++i；
</code></pre>
<p>第一条语句首先输出i当前的值1，然后i自增，其值变为2；第二条语句首先使i自增为2，然后输出i的值2。</p>
<ul>
<li><strong>赋值运算符与赋值表达式</strong></li>
</ul>
<p>C++提供了几个赋值运算符，最简单的赋值运算符就是“=”。带有赋值运算符的表达式被称为赋值表达式。例如，m=m+6就是一个赋值表达式。赋值表达式的作用就是将等号右边表达式的值赋给等号左边的对象。赋值表达式的类型为等号左边对象的类型，表达式的结果为等号左边对象被赋值后的值，运算的结合性为自右向左。请看下列赋值表达式的例子。</p>
<pre><code>n=1
</code></pre>
<p>表达式值为1。</p>
<pre><code>a=b=c=2
</code></pre>
<p>这个表达式从右向左运算，在c被更新为2后，表达式c=2的值为2，接着b的值被更新为2，最后a被赋值为2。</p>
<pre><code>a=3+(c=4)
</code></pre>
<p>表达式值为7，a的值为7，c为4。</p>
<p>除了“=”以外，C++还提供了10种复合的赋值运算符：+=，-=，*=，/=，%=，&lt;&lt;=，&gt;&gt;=，&amp;=，“=，|=。其中，前五个运算符是赋值运算符与算术运算符复合而成的，后五个是赋值运算符与位运算符复合而成的。关于位运算，稍后再做介绍。这里10种运算符的优先级与“=”相同，结合性也是自右向左。现在举例说明复合赋值运算符的功能。</p>
<pre><code> b+=2;//等价于b=b+2
 x*=y+3;//等价于x=x*(y+3)
</code></pre>
<p>如果在赋值表达式后面加上分号，便成为了赋值语句。例如：</p>
<pre><code>b=b+2;
</code></pre>
<p>便是一个赋值语句，它实现的功能与赋值表达式相同。赋值表达式与赋值语句的不同点在于：赋值表达式可以作为一个更复杂表达式的一部分，继续参与运算；而赋值语句不能。</p>
<ul>
<li><strong>逗号运算符与逗号表达式</strong></li>
</ul>
<p>在C++中，逗号也是一个运算符，它的使用形式为：</p>
<p>&lt;表达式1&gt;，&lt;表达式2&gt;，…，&lt;表达式n&gt;求解顺序为，先求解表达式1，再求解表达式2，最后求解表达式n的值。逗号表达式的最终结果为表达式n的值。例如：</p>
<pre><code>x=2*5,x*4
</code></pre>
<p>表达式的结果为40。</p>
<ul>
<li><strong>关系运算符和关系表达式</strong></li>
</ul>
<p>关系运算符即比较符。</p>
<p>用关系运算符将两个表达式连接起来就是关系表达式。关系表达式是一种最简单的逻辑表达式。例如：</p>
<pre><code> x&gt;5
 x+y&lt;=20
 c==a+b
</code></pre>
<p><em>注：“==”（等于）是连续的两个等号，勿误写为赋值运算符“=”。</em></p>
<p>关系表达式一般用于判断是否符合某一条件。关系表达式的结果类型为bool，值只能是true或false。条件满足为true，条件不满足为false。例如，当x=t时，x&gt;5的结果就为false。</p>
<ul>
<li><strong>逻辑运算符与逻辑表达式</strong></li>
</ul>
<p>用逻辑运算符将简单的关系表达式连接起来构成较复杂的逻辑表达式。逻辑表达式的结果类型也为bool，值只能为true或false。</p>
<p>“!”是一元运算符，使用形式是： !操作数。非运算的作用是对操作数取反。如果操作数a的值为true，则表达式!a的值为false：如果操作数a的值为false，则表达式!a的值为true。</p>
<p>“&amp;&amp;”是二元运算符。“&amp;&amp;”运算的作用是求两个操作数的逻辑与。只有当两个操作数的值都为true时，与运算的结果才为true，其它情况下与运算的结果均为false。</p>
<p>“||”也是二元运算符。 “||”运算的作用是求两个操作数的逻辑或。只有当两个操作数的值都为false时，或运算的结果才为false，其它情况下或运算的结果均为true。</p>
<h3 id="类和对象">类和对象</h3>
<p>类所表示的一组对象十分相似，可以作为模板来有效的创建对象，利用类可以产生很多的对象类所代表的事物或者概念都是抽象的。在存取Private类型数据或者函数的时候，只有类本身声明的函数才是被允许的。类在与外部连接时，利用的就是Public共有类型函数，任何外部函数的访问都是运行的。</p>
<p>对象主要是对客观事物的某个实体进行描述，它作为一个单位，共同组成了系统，它的组成是一组属性和一组服务，这组服务操作于这组属性。属性和服务是对象构成众多要素中的两种，属性的实质是一个数据项，主要是对对象静态特性进行描述，服务的实质是一个操作序列，主要是对对象动态特征进行描述。</p>
<h3 id="关键字">关键字</h3>
<p>关键字（<em>keyword</em>）是整个语言范围内预先保留的标识符，每个C++关键字都有特殊的含义。经过预处理后，关键字从预处理记号（<em>preprocessing-token</em>）中区出来，剩下的标识符作为记号（<em>token</em>），用于声明对象、函数、类型、命名空间等。不能声明与关键字同名的标识符。</p>
<p>各个版本的ISO C++都规定以下划线接大写字母起始的标识符保留给实现。编译器可以用这些保留标识符作为扩展关键字，这不保证可移植性。以下讨论ISO C++所保留的关键字。</p>
<p>ISO C++ 98关键字共63个，按标准排版如下：</p>
<p><strong>ISO C++ 98关键字表</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">asm</th>
<th style="text-align:left">do</th>
<th style="text-align:left">if</th>
<th style="text-align:left">return</th>
<th style="text-align:left">typedef</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">auto</td>
<td style="text-align:left">double</td>
<td style="text-align:left">inline</td>
<td style="text-align:left">short</td>
<td style="text-align:left">typeid</td>
</tr>
<tr>
<td style="text-align:left">bool</td>
<td style="text-align:left">dynamic_cast</td>
<td style="text-align:left">int</td>
<td style="text-align:left">signed</td>
<td style="text-align:left">typename</td>
</tr>
<tr>
<td style="text-align:left">break</td>
<td style="text-align:left">else</td>
<td style="text-align:left">long</td>
<td style="text-align:left">sizeof</td>
<td style="text-align:left">union</td>
</tr>
<tr>
<td style="text-align:left">case</td>
<td style="text-align:left">enum</td>
<td style="text-align:left">mutable</td>
<td style="text-align:left">static</td>
<td style="text-align:left">unsigned</td>
</tr>
<tr>
<td style="text-align:left">catch</td>
<td style="text-align:left">explicit</td>
<td style="text-align:left">namespace</td>
<td style="text-align:left">static_cast</td>
<td style="text-align:left">using</td>
</tr>
<tr>
<td style="text-align:left">char</td>
<td style="text-align:left">export</td>
<td style="text-align:left">new</td>
<td style="text-align:left">struct</td>
<td style="text-align:left">virtual</td>
</tr>
<tr>
<td style="text-align:left">class</td>
<td style="text-align:left">extern</td>
<td style="text-align:left">operator</td>
<td style="text-align:left">switch</td>
<td style="text-align:left">void</td>
</tr>
<tr>
<td style="text-align:left">const</td>
<td style="text-align:left">false</td>
<td style="text-align:left">private</td>
<td style="text-align:left">template</td>
<td style="text-align:left">volatile</td>
</tr>
<tr>
<td style="text-align:left">const_cast</td>
<td style="text-align:left">float</td>
<td style="text-align:left">protected</td>
<td style="text-align:left">this</td>
<td style="text-align:left">wchar_t</td>
</tr>
<tr>
<td style="text-align:left">continue</td>
<td style="text-align:left">for</td>
<td style="text-align:left">public</td>
<td style="text-align:left">throw</td>
<td style="text-align:left">while</td>
</tr>
<tr>
<td style="text-align:left">default</td>
<td style="text-align:left">friend</td>
<td style="text-align:left">register</td>
<td style="text-align:left">true</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">delete</td>
<td style="text-align:left">goto</td>
<td style="text-align:left">reinterpret_cast</td>
<td style="text-align:left">try</td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<hr>
<p>本篇文章就到这里了，喜欢的就请点赞、收藏、打赏，关注我，有问题可以评论或私聊我，我们下篇文章再见😄</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[初级-Part1-语言基础-快速上手C++]]></title>
        <id>https://chentianyicty6330.github.io/post/primary-p1-language-basis-quick-c/</id>
        <link href="https://chentianyicty6330.github.io/post/primary-p1-language-basis-quick-c/">
        </link>
        <updated>2023-01-29T01:48:56.000Z</updated>
        <content type="html"><![CDATA[<h2 id="c程序结构">C++程序结构</h2>
<p>一个最最最简单的C++程序是由头文件、命名空间和主函数构成的。</p>
<pre><code>#include&lt;iostream&gt;//头文件
using namespace std;//命名空间
int main()//主函数
{
    cout&lt;&lt;&quot;代码内容&quot;;
    return 0;//好习惯要保持
}
</code></pre>
<hr>
<h2 id="头文件">头文件</h2>
<blockquote>
<p>在C语言家族程序中，头文件被大量使用。一般而言，每个C++/C程序通常由头文件和定义文件组成。头文件作为一种包含功能函数、数据接口声明的载体文件，主要用于保存程序的声明，而定义文件用于保存程序的实现。——百度百科</p>
</blockquote>
<p><strong>系统自带</strong>的头文件这样引用：</p>
<pre><code>#include&lt;头文件名&gt;
</code></pre>
<p><strong>自定义</strong>的头文件这样引用：</p>
<pre><code>#include&quot;头文件名&quot;
</code></pre>
<p>万能头文件&lt;bits/stdc++.h&gt;：</p>
<pre><code>// C++ includes used for precompiling -*- C++ -*-

// Copyright (C) 2003-2014 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// &lt;http://www.gnu.org/licenses/&gt;.

/** @file stdc++.h
 *  This is an implementation file for a precompiled header.
 */

// 17.4.1.2 Headers

// C
#ifndef _GLIBCXX_NO_ASSERT
#include &lt;cassert&gt;
#endif
#include &lt;cctype&gt;
#include &lt;cerrno&gt;
#include &lt;cfloat&gt;
#include &lt;ciso646&gt;
#include &lt;climits&gt;
#include &lt;clocale&gt;
#include &lt;cmath&gt;
#include &lt;csetjmp&gt;
#include &lt;csignal&gt;
#include &lt;cstdarg&gt;
#include &lt;cstddef&gt;
#include &lt;cstdio&gt;
#include &lt;cstdlib&gt;
#include &lt;cstring&gt;
#include &lt;ctime&gt;

#if __cplusplus &gt;= 201103L
#include &lt;ccomplex&gt;
#include &lt;cfenv&gt;
#include &lt;cinttypes&gt;
#include &lt;cstdalign&gt;
#include &lt;cstdbool&gt;
#include &lt;cstdint&gt;
#include &lt;ctgmath&gt;
#include &lt;cwchar&gt;
#include &lt;cwctype&gt;
#endif

// C++
#include &lt;algorithm&gt;
#include &lt;bitset&gt;
#include &lt;complex&gt;
#include &lt;deque&gt;
#include &lt;exception&gt;
#include &lt;fstream&gt;
#include &lt;functional&gt;
#include &lt;iomanip&gt;
#include &lt;ios&gt;
#include &lt;iosfwd&gt;
#include &lt;iostream&gt;
#include &lt;istream&gt;
#include &lt;iterator&gt;
#include &lt;limits&gt;
#include &lt;list&gt;
#include &lt;locale&gt;
#include &lt;map&gt;
#include &lt;memory&gt;
#include &lt;new&gt;
#include &lt;numeric&gt;
#include &lt;ostream&gt;
#include &lt;queue&gt;
#include &lt;set&gt;
#include &lt;sstream&gt;
#include &lt;stack&gt;
#include &lt;stdexcept&gt;
#include &lt;streambuf&gt;
#include &lt;string&gt;
#include &lt;typeinfo&gt;
#include &lt;utility&gt;
#include &lt;valarray&gt;
#include &lt;vector&gt;

#if __cplusplus &gt;= 201103L
#include &lt;array&gt;
#include &lt;atomic&gt;
#include &lt;chrono&gt;
#include &lt;condition_variable&gt;
#include &lt;forward_list&gt;
#include &lt;future&gt;
#include &lt;initializer_list&gt;
#include &lt;mutex&gt;
#include &lt;random&gt;
#include &lt;ratio&gt;
#include &lt;regex&gt;
#include &lt;scoped_allocator&gt;
#include &lt;system_error&gt;
#include &lt;thread&gt;
#include &lt;tuple&gt;
#include &lt;typeindex&gt;
#include &lt;type_traits&gt;
#include &lt;unordered_map&gt;
#include &lt;unordered_set&gt;
#endif

</code></pre>
<p>头文件大全：</p>
<pre><code>//传统C++
#include&lt;assert.h&gt;//设定插入点
 
#include&lt;ctype.h&gt;//字符处理
 
#include&lt;errno.h&gt;//定义错误码
 
#include&lt;float.h&gt;//浮点数处理
 
#include&lt;fstream.h&gt;//文件输入/输出
 
#include&lt;iomanip.h&gt;//参数化输入/输出
 
#include&lt;iostream.h&gt;//数据流输入/输出
 
#include&lt;limits.h&gt;//定义各种数据类型最值常量
 
#include&lt;locale.h&gt;//定义本地化函数
 
#include&lt;math.h&gt;//定义数学函数
 
#include&lt;stdio.h&gt;//定义输入/输出函数
 
#include&lt;stdlib.h&gt;//定义杂项函数及内存分配函数
 
#include&lt;string.h&gt;//字符串处理
 
#include&lt;strstrea.h&gt;//基于数组的输入/输出
 
#include&lt;time.h&gt;//定义关于时间的函数
 
#include&lt;wchar.h&gt;//宽字符处理及输入/输出
 
#include&lt;wctype.h&gt;//宽字符分类
</code></pre>
<!---->
<pre><code>//标准C++
#include&lt;algorithm&gt;//STL通用算法
 
#include&lt;bitset&gt;//STL位集容器
 
#include&lt;bits/stdc++.h&gt;//编译器GCC 4.8支持的万能头文件，基本包含所有头文件
 
#include&lt;cctype&gt;//C字符处理
 
#include&lt;cerrno&gt;//C的错误报告机制
 
#include&lt;clocale&gt;
 
#include&lt;cmath&gt;//兼容C语言数学库
 
#include&lt;complex&gt;//复数类
 
#include&lt;cstdio&gt;//C语言输入输出工具
 
#include&lt;cstdlib&gt;//C语言通用工具
 
#include&lt;cstring&gt;//C字符串
 
#include&lt;ctime&gt;
 
#include&lt;deque&gt;//STL双端队列容器
 
#include&lt;exception&gt;//异常处理类
 
#include&lt;fstream&gt;//文件输入输出流
 
#include&lt;functional&gt;//STL定义运算函数（代替运算符）
 
#include&lt;limits&gt;
 
#include&lt;list&gt;//STL线性列表容器
 
#include&lt;map&gt;//STL映射容器
 
#include&lt;iomanip&gt;
 
#include&lt;ios&gt;//基本输入/输出支持
 
#include&lt;iosfwd&gt;//输入/输出系统使用的前置声明
 
#include&lt;iostream&gt;//基本输入输出流
 
#include&lt;queue&gt;//STL队列容器
 
#include&lt;set&gt;//STL集合容器
 
#include&lt;sstream&gt;//基于字符串的流
 
#include&lt;stack&gt;//STL堆栈容器
 
#include&lt;stdexcept&gt;//标准异常类
 
#include&lt;streambuf&gt;//底层输入/输出支持
 
#include&lt;string&gt;//字符串类
 
#include&lt;utility&gt;//STL通用模板类
 
#include&lt;vector&gt;//STL动态数组容器
 
#include&lt;cwchar&gt;
 
#include&lt;cwctype&gt;
</code></pre>
<!---->
<pre><code>//C99版本
#include&lt;complex.h&gt;//复数处理
 
#include&lt;fenv.h&gt;//浮点环境
 
#include&lt;inttypes.h&gt;//整数格式转换
 
#include&lt;stdbool.h&gt;//布尔环境
 
#include&lt;stdint.h&gt;//整型环境
 
#include&lt;tgmath.h&gt;//通用类型数学宏
</code></pre>
<hr>
<h2 id="命名空间">命名空间</h2>
<blockquote>
<p>namespace即“命名空间”，也称“名称空间” 。是许多编程语言使用的一种代码组织的形式，通过命名空间来分类，区别不同的代码功能，避免不同的代码片段（通常由不同的人协同工作或调用已有的代码片段）同时使用时由于不同代码间变量名相同而造成冲突。——百度百科</p>
</blockquote>
<p>写代码时一般且最简单的命名空间就是：</p>
<pre><code>using namespace std;
</code></pre>
<hr>
<h2 id="主函数">主函数</h2>
<p>main() 函数是 C++ 程序的入口函数，C++ 标准规定 main() 函数的返回值类型为 int，返回值用于表示程序的退出状态，返回 0 表示程序正常退出，返回非 0，表示出现异常。</p>
<p>所以主函数定义要这样写：</p>
<pre><code>int main()
{
    
    return 0;
}
</code></pre>
<hr>
<p>本篇文章就到这里了，喜欢的就请点赞、收藏、打赏，关注我，有问题可以评论或私聊我，我们下篇文章再见😄</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[C++系列课程学习规划]]></title>
        <id>https://chentianyicty6330.github.io/post/c-curriculum-planning/</id>
        <link href="https://chentianyicty6330.github.io/post/c-curriculum-planning/">
        </link>
        <updated>2023-01-28T12:38:28.000Z</updated>
        <content type="html"><![CDATA[<h2 id="c初级班120小时">C++初级班（120小时）</h2>
<blockquote>
<p>这个部分主要是帮助语言同学快速入门C++。</p>
</blockquote>
<p><strong>Part 1:</strong></p>
<p><strong>语言基础</strong></p>
<p>快速上手 C++</p>
<p>C++简介</p>
<p>IDE</p>
<p>赋值语句、运算符、表达式、常量</p>
<p>变量、数据类型</p>
<p>数据输入输出、顺序结构</p>
<p>程序的控制结构</p>
<p>if、switch 选择结构</p>
<p>选择语句的嵌套。</p>
<p>循环结构，for 循环语句，while 循环，</p>
<p>do-while 循环，循环嵌套。</p>
<p>三种结构嵌套运用。</p>
<p>数组：二维数组</p>
<p>字符数组</p>
<p>字符串数组</p>
<p>文件操作</p>
<p>结构体、指针</p>
<p><strong>Part 2: C++的结构体</strong></p>
<p><strong>重载运算符</strong></p>
<p>如何自己定义加减乘除</p>
<p>如何自己定义比较大小</p>
<p><strong>Part 3: STL 部分</strong></p>
<p><strong>STL</strong></p>
<p>std::vector 不定长数组</p>
<p>std::set 快速查找</p>
<p>std::map 数组的下标</p>
<p>std::string 现代化的字符串</p>
<p><strong>Part 4：快速实现基础数据结构</strong></p>
<p><strong>链表(Linked list)</strong></p>
<p>链表是什么</p>
<p>如何<strong>快速实现</strong>链表</p>
<p><strong>栈(Stack)</strong></p>
<p>栈是什么</p>
<p>如何<strong>快速实现</strong>栈</p>
<p><strong>队列(Queue)</strong></p>
<p>队列是什么</p>
<p>如何<strong>快速实现</strong>队列</p>
<hr>
<h2 id="算法中级班120-小时"><strong>算法中级班（120 小时）</strong></h2>
<p><strong>Part 1: 算法入门</strong></p>
<p><strong>什么是一个好算法</strong></p>
<p>时空复杂度分析</p>
<p><strong>如何找到一个答案</strong></p>
<p>枚举法</p>
<p><strong>模拟算法</strong></p>
<p><strong>贪心算法</strong></p>
<p><strong>递归</strong></p>
<p>什么是递归</p>
<p>递归的实现</p>
<p><strong>分治</strong></p>
<p><strong>序列算法</strong></p>
<p>前缀和</p>
<p>尺取法(双指针)</p>
<p><strong>在有序数据中快速查找</strong></p>
<p>二分查找</p>
<p><strong>Part 2: 排序算法</strong></p>
<p><strong>归并排序</strong></p>
<p>递归处理</p>
<p>合并数组</p>
<p>应用：逆序对</p>
<p><strong>快速排序</strong></p>
<p>自定义 comp 函数</p>
<p>结构体内重载运算符</p>
<p><strong>桶排序</strong></p>
<p><strong>Part 3：搜索算法</strong></p>
<p><strong>深度优先搜索(DFS)</strong></p>
<p><strong>广度优先搜索(BFS)</strong></p>
<p><strong>如何优化搜索</strong></p>
<p>记忆化搜索</p>
<p>剪枝</p>
<p>可行性剪枝</p>
<p>上下界剪枝</p>
<p>最优化剪枝</p>
<p><strong>Part 4：数据结构</strong></p>
<p><strong>基础数据结构怎么考</strong></p>
<p>链表、栈、队列的习题</p>
<p><strong>树</strong></p>
<p>如何存储一颗树</p>
<p>邻接矩阵</p>
<p>邻接表</p>
<p>链式前向星</p>
<p>vector</p>
<p>如何遍历一颗树</p>
<p><strong>堆</strong></p>
<p>什么是堆</p>
<p>如何<strong>快速实现</strong>一个堆</p>
<p>堆的优先级定义、运算符重载</p>
<p><strong>并查集</strong></p>
<p>什么是并查集</p>
<p>并查集的快速实现</p>
<p>按秩合并</p>
<p>路径压缩</p>
<p><strong>Part 5：动态规划</strong></p>
<p><strong>递推</strong></p>
<p>经典递推问题</p>
<p><strong>背包问题</strong></p>
<p>01 背包</p>
<p>完全背包</p>
<p>多重背包（二进制分解）</p>
<p>滚动数组</p>
<p><strong>经典动态规划问题</strong></p>
<p>最长上升子序列</p>
<p>最长公共子序列</p>
<p>典型题：LCS 转 LIS</p>
<p><strong>Part 6：图论</strong></p>
<p><strong>图</strong></p>
<p>什么是图</p>
<p>如何存图</p>
<p>链式前向星</p>
<p>如何遍历图</p>
<p><strong>最短路问题</strong></p>
<p>Floyd 算法</p>
<p>Dijkstra、堆优化算法</p>
<p>SPFA 算法</p>
<p><strong>最小生成树问题</strong></p>
<p>Kruskal 算法</p>
<p>Prim 算法</p>
<p><strong>拓扑图</strong></p>
<p><strong>Part 7：数学</strong></p>
<p>进制转化</p>
<p>gcd</p>
<p>素数判断</p>
<p>素数筛法（埃氏筛法）</p>
<p>模运算及其性质</p>
<p><strong>快速幂</strong></p>
<hr>
<h2 id="算法高级班240-小时"><strong>算法高级班（240 小时）</strong></h2>
<p><strong>Part 1: 算法入门</strong></p>
<p><strong>位运算</strong></p>
<p>二进制枚举</p>
<p><strong>序列算法</strong></p>
<p>序列差分及应用</p>
<p><strong>二分答案</strong></p>
<p>解决答案单调性问题</p>
<p><strong>倍增算法</strong></p>
<p>涉及倍增的 dp（跑路）</p>
<p>RMQ 问题</p>
<p>倍增求 LCA</p>
<p>离散化</p>
<p>悬线法</p>
<p><strong>Part 2: 搜索</strong></p>
<p><strong>双向 BFS</strong></p>
<p><strong>剪枝技巧</strong></p>
<p><strong>Part 3：数据结构</strong></p>
<p><strong>单调数据结构</strong></p>
<p>单调栈</p>
<p>单调队列</p>
<p><strong>快速区间查询</strong></p>
<p>分块</p>
<p>树状数组入门</p>
<p>线段树入门</p>
<p><strong>Part 4：图论</strong></p>
<p><strong>二分图</strong></p>
<p>什么是二分图</p>
<p>二分图匹配</p>
<p><strong>强连通性</strong></p>
<p>Tarjan 算法</p>
<p>缩点</p>
<p>点/边双连通性、双连通分量</p>
<p>割边、割点求法</p>
<p><strong>缩点</strong></p>
<p>DAG 上的 DP 问题</p>
<p>最短路问题</p>
<p><strong>最短路问题扩展</strong></p>
<p>差分约束模型</p>
<p>分层图最短路模型</p>
<p><strong>拓扑排序</strong></p>
<p>图论综合应用</p>
<p><strong>树相关</strong></p>
<p>树的直径</p>
<p>树的重心</p>
<p>最近公共祖先</p>
<p><strong>Part 5：动态规划</strong></p>
<p><strong>区间型 DP</strong></p>
<p><strong>状态压缩型 DP</strong></p>
<p><strong>树形 DP</strong></p>
<p><strong>数位 DP</strong></p>
<p><strong>Part 6：数学</strong></p>
<p><strong>素数</strong></p>
<p>埃氏线性素数筛</p>
<p><strong>欧几里得</strong></p>
<p>gcd</p>
<p>ex_gcd</p>
<p>同余</p>
<p>不定方程</p>
<p>费马小定理</p>
<p>求逆元</p>
<p>线性求 n 个数逆元</p>
<p><strong>欧拉</strong></p>
<p>高斯消元</p>
<p>欧拉函数</p>
<p>线性欧拉筛</p>
<p><strong>快速幂</strong></p>
<p><strong>组合数学</strong></p>
<p>排列组合</p>
<p>卡特兰数</p>
<p>[scoi2010] 生成字符串</p>
<p>容斥原理</p>
<p><strong>线性代数</strong></p>
<p>矩阵乘法</p>
<p>结合快速幂</p>
<p><strong>抽屉原理</strong></p>
<p><strong>Part 7: 字符串</strong></p>
<p><strong>字符串匹配问题</strong></p>
<p>Trie 树</p>
<p>字符串哈希</p>
<p>KMP</p>
<p>扩展 KMP</p>
<p><strong>回文串问题</strong></p>
<p>Manacher</p>
<hr>
<h2 id="算法省选班"><strong>算法省选班</strong></h2>
<p><strong>Part 1: 计算几何</strong></p>
<p>叉积</p>
<p>判断点、线段、直线、多边形的相互位置关系</p>
<p>凸多边形面积、重心计算</p>
<p>凸包的定义与求法</p>
<p>最近/远点对</p>
<p>半平面交</p>
<p>矩形的并与交</p>
<p>三角剖分</p>
<p>Pick 定理</p>
<p>计算相关（扫描线计算面积，三位凸包体积）</p>
<p>极坐标系</p>
<p>欧氏距离，曼哈顿距离与切比雪夫距离</p>
<p>曼哈顿距离与切比雪夫距离的转化</p>
<p>扫描线</p>
<p>自适应 Simpson 积分</p>
<p><strong>Part 2: 基础算法</strong></p>
<p>二分 Plus</p>
<p>二分套二分</p>
<p>分数规划问题</p>
<p>二进制 Plus</p>
<p>枚举子集</p>
<p>简单的二进制计数</p>
<p>01 Trie</p>
<p>大模拟</p>
<p><strong>Part 3: 搜索</strong></p>
<p>A*算法</p>
<p>迭代加深算法与 IDA*</p>
<p><strong>Part 4: 数据结构</strong></p>
<p><strong>线段树</strong></p>
<p>区间修改，区间查询</p>
<p>lazy tag</p>
<p>维护不同种内容</p>
<p>树链剖分</p>
<p>分块数据结构</p>
<p>分块</p>
<p>莫队算法</p>
<p>离线算法</p>
<p>莫队算法</p>
<p>CDQ 分治（三维偏序）</p>
<p>可持久化</p>
<p>可持久化线段树</p>
<p>散列表</p>
<p>堆</p>
<p>可并堆</p>
<p>平衡树</p>
<p>伸展树</p>
<p>Treap 树</p>
<p>动态树</p>
<p>Link-Cut 树</p>
<p><strong>Part 5: 图论</strong></p>
<p>连通性</p>
<p>2-SAT 问题</p>
<p><strong>树上问题</strong></p>
<p>启发式合并</p>
<p>虚树</p>
<p>点分治</p>
<p>最小树形图 朱-刘算法</p>
<p><strong>网络流</strong></p>
<p>最大流</p>
<p>最小费用流</p>
<p>最小割</p>
<p>上下界网络流</p>
<p>平面图-对偶图</p>
<p>网络流建模基础：网络流 24 题</p>
<p><strong>Part 6: 动态规划</strong></p>
<p><strong>DP 优化</strong></p>
<p>单调队列/单调栈优化</p>
<p>数据结构优化</p>
<p>斜率优化</p>
<p>四边形不等式优化</p>
<p><strong>Part 7: 数学&amp;数论</strong></p>
<p>原根和指标</p>
<p><strong>素数相关</strong></p>
<p>Miller-Rabin 素数判定</p>
<p>Pollard's Rho 质因子分解</p>
<p><strong>同余问题进阶</strong></p>
<p>中国剩余定理及其扩展</p>
<p>BSGS 及其扩展原根及其性质</p>
<p>高次剩余</p>
<p>二次剩余</p>
<p>原根及离散对数</p>
<p>Lucas 定理</p>
<p>卢卡斯定理</p>
<p>数论函数初步（欧拉函数，莫比乌斯函数，除数函数等常见积性函数及其性质）</p>
<p>狄利克雷卷积及其性质</p>
<p><strong>组合数学</strong></p>
<p>8 种球盒问题</p>
<p>斯特林数及其性质</p>
<p>整数拆分问题</p>
<p>二项式反演</p>
<p><strong>概率期望</strong></p>
<p>期望的线性性</p>
<p>概率 dp</p>
<p>概率方程组求解</p>
<p><strong>线性代数</strong></p>
<p>高斯消元</p>
<p>线性递推与矩阵快速幂</p>
<p>线性基</p>
<p><strong>多项式与幂级数</strong></p>
<p>DFT/FFT</p>
<p>FFT 与 FNTT 算法的实现</p>
<p>拉格朗日插值</p>
<p>NTT</p>
<p>任意模数 NTT</p>
<p><strong>Part 8: 博弈论与信息论</strong></p>
<p>组合游戏</p>
<p>SG 函数</p>
<p>Nim 游戏</p>
<p>数据压缩</p>
<p>哈夫曼编码</p>
<p><strong>Part 9: 字符串</strong></p>
<p>模式匹配</p>
<p>AC 自动机</p>
<p>Trie 图</p>
<p>字典树</p>
<p>01-Trie</p>
<p>KMP、Trie 上的 DP</p>
<p>AC 自动机上的 DP</p>
<p>回文串</p>
<p>Manacher 算法</p>
<p><strong>Part 10: 分治</strong></p>
<p>树分治</p>
<p>重链剖分</p>
<p>长链剖分</p>
<p>树套树</p>
<p><strong>Part 12: 随机化与近似算法</strong></p>
<p>爬山法</p>
<p>模拟退火</p>
<p>遗传算法</p>
<hr>
<h2 id="算法-noi-班"><strong>算法 NOI 班</strong></h2>
<p><strong>Part 1: 数据结构</strong></p>
<p>高级数据结构进阶</p>
<p>左偏树</p>
<p>树套树</p>
<p>动态树 LCT</p>
<p>K-D Tree</p>
<p>平衡树</p>
<p>替罪羊树</p>
<p>可持久化平衡树</p>
<p>分块数据结构</p>
<p>树分块</p>
<p>树上莫队</p>
<p>离线算法</p>
<p>莫队算法进阶</p>
<p>带修改莫队</p>
<p>树上莫队</p>
<p>回滚莫队</p>
<p>动态树</p>
<p>TopTree</p>
<p>Dancing Links</p>
<p>各种数据结构的综合应用</p>
<p><strong>仙人掌相关</strong></p>
<p>圆方树与仙人掌剖分</p>
<p><strong>Part 2: 代数</strong></p>
<p>线性代数</p>
<p>矩阵树定理</p>
<p>莫比乌斯反演</p>
<p>素性测试</p>
<p>Miller-Robin</p>
<p>Pollard’s ρ质因子分解</p>
<p>原根和指标</p>
<p><strong>数论部分</strong></p>
<p>杜教筛</p>
<p>Min25 筛</p>
<p>洲阁筛</p>
<p><strong>组合数学</strong></p>
<p>生成函数</p>
<p><strong>多项式与幂级数</strong></p>
<p>FFT/FNTT 算法原理</p>
<p>FWT</p>
<p>多项式除法/求逆/开方/对数指数函数等各种算法</p>
<p>常系数齐次线性递推</p>
<p><strong>群论</strong></p>
<p>置换群的定义与性质</p>
<p>Burnside 引理</p>
<p>Polya 定理</p>
<p><strong>博弈论</strong></p>
<p>Nim 游戏</p>
<p>SG 函数</p>
<p><strong>Part 3: 计算几何</strong></p>
<p>旋转卡壳</p>
<p>半平面交</p>
<p>三角剖分</p>
<p>随机增量法（最小圆覆盖问题）</p>
<p><strong>Part 4: 图论</strong></p>
<p>网络流问题</p>
<p>各种建模技巧</p>
<p>线性规划与单纯形算法</p>
<p>树相关问题</p>
<p>边分治</p>
<p>动态点分治</p>
<p>Prufer 序列</p>
<p>基环树相关问题</p>
<p>欧拉图与哈密顿图的定义与性质</p>
<p>弦图相关（不要求）</p>
<p>各种图论问题的综合应用</p>
<p><strong>Part 5: 字符串</strong></p>
<p>字典树</p>
<p>后缀树</p>
<p>后缀自动机</p>
<p>广义后缀自动机</p>
<p>回文树</p>
<p>各种综合性字符串问题</p>
<p>回文串</p>
<p>回文树</p>
<p><strong>Part 6: 分治</strong></p>
<p>序列分治</p>
<p>整体二分</p>
<p>树分治</p>
<p>点/边分治</p>
<p><strong>Part 7: 动态规划</strong></p>
<p>DDP (动态动态规划)</p>
<p>Dp 套 DP</p>
<hr>
<p>本篇文章就到这里了，喜欢的就请点赞、收藏、打赏，关注我，有问题可以评论或私聊我，我们下篇文章再见😄</p>
]]></content>
    </entry>
</feed>